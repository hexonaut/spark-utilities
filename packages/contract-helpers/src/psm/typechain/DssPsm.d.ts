/* Autogenerated file. Do not edit manually. */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers';
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

export interface DssPsmInterface extends ethers.utils.Interface {
  functions: {
    "buyGem(address,uint256)": FunctionFragment;
    "gemJoin()": FunctionFragment;
    "sellGem(address,uint256)": FunctionFragment;
    "tin()": FunctionFragment;
    "tout()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buyGem"
      | "gemJoin"
      | "sellGem"
      | "tin"
      | "tout"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyGem",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "gemJoin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sellGem",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tin", values?: undefined): string;
  encodeFunctionData(functionFragment: "tout", values?: undefined): string;

  decodeFunctionResult(functionFragment: "buyGem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gemJoin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellGem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tout", data: BytesLike): Result;

  events: {};
}

export interface DssPsm extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DssPsmInterface;

  functions: {
    buyGem(
      usr: string,
      gemAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    gemJoin(overrides?: CallOverrides): Promise<[string]>;

    sellGem(
      usr: string,
      gemAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tin(overrides?: CallOverrides): Promise<[BigNumber]>;

    tout(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  buyGem(
    usr: string,
    gemAmt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  gemJoin(overrides?: CallOverrides): Promise<string>;

  sellGem(
    usr: string,
    gemAmt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tin(overrides?: CallOverrides): Promise<BigNumber>;

  tout(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    buyGem(
      usr: string,
      gemAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    gemJoin(overrides?: CallOverrides): Promise<string>;

    sellGem(
      usr: string,
      gemAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tin(overrides?: CallOverrides): Promise<BigNumber>;

    tout(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    buyGem(
      usr: string,
      gemAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    gemJoin(overrides?: CallOverrides): Promise<BigNumber>;

    sellGem(
      usr: string,
      gemAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tin(overrides?: CallOverrides): Promise<BigNumber>;

    tout(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    buyGem(
      usr: string,
      gemAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    gemJoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellGem(
      usr: string,
      gemAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tout(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
