/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DssPsmInterface extends ethers.utils.Interface {
  functions: {
    "buyGem(address,uint256)": FunctionFragment;
    "dai()": FunctionFragment;
    "daiJoin()": FunctionFragment;
    "deny(address)": FunctionFragment;
    "file(bytes32,uint256)": FunctionFragment;
    "gemJoin()": FunctionFragment;
    "hope(address)": FunctionFragment;
    "ilk()": FunctionFragment;
    "nope(address)": FunctionFragment;
    "rely(address)": FunctionFragment;
    "sellGem(address,uint256)": FunctionFragment;
    "tin()": FunctionFragment;
    "tout()": FunctionFragment;
    "vat()": FunctionFragment;
    "vow()": FunctionFragment;
    "wards(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buyGem",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "dai", values?: undefined): string;
  encodeFunctionData(functionFragment: "daiJoin", values?: undefined): string;
  encodeFunctionData(functionFragment: "deny", values: [string]): string;
  encodeFunctionData(
    functionFragment: "file",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "gemJoin", values?: undefined): string;
  encodeFunctionData(functionFragment: "hope", values: [string]): string;
  encodeFunctionData(functionFragment: "ilk", values?: undefined): string;
  encodeFunctionData(functionFragment: "nope", values: [string]): string;
  encodeFunctionData(functionFragment: "rely", values: [string]): string;
  encodeFunctionData(
    functionFragment: "sellGem",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tin", values?: undefined): string;
  encodeFunctionData(functionFragment: "tout", values?: undefined): string;
  encodeFunctionData(functionFragment: "vat", values?: undefined): string;
  encodeFunctionData(functionFragment: "vow", values?: undefined): string;
  encodeFunctionData(functionFragment: "wards", values: [string]): string;

  decodeFunctionResult(functionFragment: "buyGem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dai", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "daiJoin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deny", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "file", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gemJoin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hope", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ilk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nope", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rely", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellGem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tout", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wards", data: BytesLike): Result;

  events: {
    "BuyGem(address,uint256,uint256)": EventFragment;
    "Deny(address)": EventFragment;
    "File(bytes32,uint256)": EventFragment;
    "Rely(address)": EventFragment;
    "SellGem(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BuyGem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deny"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "File"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rely"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellGem"): EventFragment;
}

export class DssPsm extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DssPsmInterface;

  functions: {
    buyGem(
      usr: string,
      gemAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "buyGem(address,uint256)"(
      usr: string,
      gemAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dai(overrides?: CallOverrides): Promise<[string]>;

    "dai()"(overrides?: CallOverrides): Promise<[string]>;

    daiJoin(overrides?: CallOverrides): Promise<[string]>;

    "daiJoin()"(overrides?: CallOverrides): Promise<[string]>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deny(address)"(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    file(
      what: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "file(bytes32,uint256)"(
      what: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gemJoin(overrides?: CallOverrides): Promise<[string]>;

    "gemJoin()"(overrides?: CallOverrides): Promise<[string]>;

    hope(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "hope(address)"(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ilk(overrides?: CallOverrides): Promise<[string]>;

    "ilk()"(overrides?: CallOverrides): Promise<[string]>;

    nope(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "nope(address)"(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "rely(address)"(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellGem(
      usr: string,
      gemAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sellGem(address,uint256)"(
      usr: string,
      gemAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tin(overrides?: CallOverrides): Promise<[BigNumber]>;

    "tin()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    tout(overrides?: CallOverrides): Promise<[BigNumber]>;

    "tout()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    vat(overrides?: CallOverrides): Promise<[string]>;

    "vat()"(overrides?: CallOverrides): Promise<[string]>;

    vow(overrides?: CallOverrides): Promise<[string]>;

    "vow()"(overrides?: CallOverrides): Promise<[string]>;

    wards(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "wards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  buyGem(
    usr: string,
    gemAmt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "buyGem(address,uint256)"(
    usr: string,
    gemAmt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dai(overrides?: CallOverrides): Promise<string>;

  "dai()"(overrides?: CallOverrides): Promise<string>;

  daiJoin(overrides?: CallOverrides): Promise<string>;

  "daiJoin()"(overrides?: CallOverrides): Promise<string>;

  deny(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deny(address)"(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  file(
    what: BytesLike,
    data: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "file(bytes32,uint256)"(
    what: BytesLike,
    data: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gemJoin(overrides?: CallOverrides): Promise<string>;

  "gemJoin()"(overrides?: CallOverrides): Promise<string>;

  hope(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "hope(address)"(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ilk(overrides?: CallOverrides): Promise<string>;

  "ilk()"(overrides?: CallOverrides): Promise<string>;

  nope(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "nope(address)"(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rely(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "rely(address)"(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellGem(
    usr: string,
    gemAmt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sellGem(address,uint256)"(
    usr: string,
    gemAmt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tin(overrides?: CallOverrides): Promise<BigNumber>;

  "tin()"(overrides?: CallOverrides): Promise<BigNumber>;

  tout(overrides?: CallOverrides): Promise<BigNumber>;

  "tout()"(overrides?: CallOverrides): Promise<BigNumber>;

  vat(overrides?: CallOverrides): Promise<string>;

  "vat()"(overrides?: CallOverrides): Promise<string>;

  vow(overrides?: CallOverrides): Promise<string>;

  "vow()"(overrides?: CallOverrides): Promise<string>;

  wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "wards(address)"(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    buyGem(
      usr: string,
      gemAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "buyGem(address,uint256)"(
      usr: string,
      gemAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    dai(overrides?: CallOverrides): Promise<string>;

    "dai()"(overrides?: CallOverrides): Promise<string>;

    daiJoin(overrides?: CallOverrides): Promise<string>;

    "daiJoin()"(overrides?: CallOverrides): Promise<string>;

    deny(usr: string, overrides?: CallOverrides): Promise<void>;

    "deny(address)"(usr: string, overrides?: CallOverrides): Promise<void>;

    file(
      what: BytesLike,
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "file(bytes32,uint256)"(
      what: BytesLike,
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    gemJoin(overrides?: CallOverrides): Promise<string>;

    "gemJoin()"(overrides?: CallOverrides): Promise<string>;

    hope(usr: string, overrides?: CallOverrides): Promise<void>;

    "hope(address)"(usr: string, overrides?: CallOverrides): Promise<void>;

    ilk(overrides?: CallOverrides): Promise<string>;

    "ilk()"(overrides?: CallOverrides): Promise<string>;

    nope(usr: string, overrides?: CallOverrides): Promise<void>;

    "nope(address)"(usr: string, overrides?: CallOverrides): Promise<void>;

    rely(usr: string, overrides?: CallOverrides): Promise<void>;

    "rely(address)"(usr: string, overrides?: CallOverrides): Promise<void>;

    sellGem(
      usr: string,
      gemAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sellGem(address,uint256)"(
      usr: string,
      gemAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tin(overrides?: CallOverrides): Promise<BigNumber>;

    "tin()"(overrides?: CallOverrides): Promise<BigNumber>;

    tout(overrides?: CallOverrides): Promise<BigNumber>;

    "tout()"(overrides?: CallOverrides): Promise<BigNumber>;

    vat(overrides?: CallOverrides): Promise<string>;

    "vat()"(overrides?: CallOverrides): Promise<string>;

    vow(overrides?: CallOverrides): Promise<string>;

    "vow()"(overrides?: CallOverrides): Promise<string>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "wards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    BuyGem(
      owner: string | null,
      value: null,
      fee: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { owner: string; value: BigNumber; fee: BigNumber }
    >;

    Deny(usr: string | null): TypedEventFilter<[string], { usr: string }>;

    File(
      what: BytesLike | null,
      data: null
    ): TypedEventFilter<[string, BigNumber], { what: string; data: BigNumber }>;

    Rely(usr: string | null): TypedEventFilter<[string], { usr: string }>;

    SellGem(
      owner: string | null,
      value: null,
      fee: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { owner: string; value: BigNumber; fee: BigNumber }
    >;
  };

  estimateGas: {
    buyGem(
      usr: string,
      gemAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "buyGem(address,uint256)"(
      usr: string,
      gemAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dai(overrides?: CallOverrides): Promise<BigNumber>;

    "dai()"(overrides?: CallOverrides): Promise<BigNumber>;

    daiJoin(overrides?: CallOverrides): Promise<BigNumber>;

    "daiJoin()"(overrides?: CallOverrides): Promise<BigNumber>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deny(address)"(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    file(
      what: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "file(bytes32,uint256)"(
      what: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gemJoin(overrides?: CallOverrides): Promise<BigNumber>;

    "gemJoin()"(overrides?: CallOverrides): Promise<BigNumber>;

    hope(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "hope(address)"(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ilk(overrides?: CallOverrides): Promise<BigNumber>;

    "ilk()"(overrides?: CallOverrides): Promise<BigNumber>;

    nope(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "nope(address)"(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "rely(address)"(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellGem(
      usr: string,
      gemAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sellGem(address,uint256)"(
      usr: string,
      gemAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tin(overrides?: CallOverrides): Promise<BigNumber>;

    "tin()"(overrides?: CallOverrides): Promise<BigNumber>;

    tout(overrides?: CallOverrides): Promise<BigNumber>;

    "tout()"(overrides?: CallOverrides): Promise<BigNumber>;

    vat(overrides?: CallOverrides): Promise<BigNumber>;

    "vat()"(overrides?: CallOverrides): Promise<BigNumber>;

    vow(overrides?: CallOverrides): Promise<BigNumber>;

    "vow()"(overrides?: CallOverrides): Promise<BigNumber>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "wards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyGem(
      usr: string,
      gemAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "buyGem(address,uint256)"(
      usr: string,
      gemAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dai()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daiJoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "daiJoin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deny(address)"(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    file(
      what: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "file(bytes32,uint256)"(
      what: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gemJoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gemJoin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hope(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "hope(address)"(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ilk(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ilk()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nope(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "nope(address)"(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "rely(address)"(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellGem(
      usr: string,
      gemAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sellGem(address,uint256)"(
      usr: string,
      gemAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tout(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tout()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vat()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vow()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "wards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
